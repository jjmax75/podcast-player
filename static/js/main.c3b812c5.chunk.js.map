{"version":3,"sources":["screens/search.js","screens/podcast.js","app.js","index.js"],"names":["Search","setSelectedPodcast","useState","searchTerm","setSearchTerm","podcasts","setPodcasts","getPodcasts","e","a","preventDefault","options","headers","process","fetch","result","json","parsed","results","type","placeholder","value","onChange","target","onClick","map","id","title_original","Podcast","podcastDetails","setPodcastDetails","audio","setAudio","useEffect","episodes","title","controls","src","App","selectedPodcast","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOA+CeA,EA3CA,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,mBAAwB,EACHC,mBAAS,IADN,mBAChCC,EADgC,KACpBC,EADoB,OAEPF,mBAAS,IAFF,mBAEhCG,EAFgC,KAEtBC,EAFsB,KAIjCC,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAClBD,EAAEE,iBACIC,EAAU,CACdC,QAAS,CACP,kBAAmBC,qCAJL,SAQGC,MAAM,GAAD,OAdJ,4CAcI,qBAAkCX,EAAlC,gCAA4EQ,GARpF,cAQZI,EARY,gBASGA,EAAOC,OATV,OASZC,EATY,OAWlBX,EAAYW,EAAOC,SAXD,2CAAH,sDAoBjB,OACE,qCACE,sDACA,iCACE,uBACEC,KAAK,OACLC,YAAY,uBACZC,MAAOlB,EACPmB,SAAU,SAAAd,GAAC,OAAIJ,EAAcI,EAAEe,OAAOF,UAExC,wBAAQG,QAASjB,EAAjB,uBAEF,6BAjBFF,EAASoB,KAAI,gBAAEC,EAAF,EAAEA,GAAIC,EAAN,EAAMA,eAAN,OAA0B,oBAAIH,QAAS,kBAAMvB,EAAmByB,IAAtC,SACpCC,GADoFD,YC2B5EE,EA9CC,SAAC,GAAY,IAAVF,EAAS,EAATA,GAAS,EACkBxB,mBAAS,IAD3B,mBACnB2B,EADmB,KACHC,EADG,OAEA5B,qBAFA,mBAEnB6B,EAFmB,KAEZC,EAFY,KAI1BC,oBAAS,sBAAC,gCAAAxB,EAAA,6DACFE,EAAU,CACdC,QAAS,CACP,kBAAmBC,qCAHf,SAOaC,MAAM,GAAD,OAbJ,4CAaI,qBAAkCY,GAAMf,GAP1D,cAOFI,EAPE,gBAQaA,EAAOC,OARpB,OAQFC,EARE,OAURa,EAAkBb,GAVV,2CAWP,CAACS,IASJ,OACEG,EAAeK,SACb,qCACE,6BATJL,EAAeK,SAAST,KAAI,gBAAGM,EAAH,EAAGA,MAAOL,EAAV,EAAUA,GAAIS,EAAd,EAAcA,MAAd,OAC1B,oBAAaX,QAAS,kBAAMQ,EAASD,IAArC,SAA8CI,GAArCT,QAWLK,GACA,wBACEK,UAAQ,EACRC,IAAKN,EAFP,8CAII,yCAJJ,kBASJ,oEC9BSO,EATH,WAAO,IAAD,EAC8BpC,qBAD9B,mBACTqC,EADS,KACQtC,EADR,KAEhB,OACEsC,EACI,cAAC,EAAD,CAASb,GAAIa,IACb,cAAC,EAAD,CAAQtC,mBAAoBA,KCLpCuC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c3b812c5.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst listenNotesApiUrl = 'https://listen-api.listennotes.com/api/v2';\n\nconst Search = ({setSelectedPodcast}) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [podcasts, setPodcasts] = useState([]);\n\n  const getPodcasts = async (e) => {\n    e.preventDefault();\n    const options = {\n      headers: {\n        'X-ListenAPI-Key': process.env.REACT_APP_LISTEN_NOTES_API_KEY,\n      }\n    };\n\n    const result = await fetch(`${listenNotesApiUrl}/search?q=${searchTerm}&sort_by_date=0&type=podcast`, options);\n    const parsed = await result.json();\n    \n    setPodcasts(parsed.results);\n  }\n\n  const renderPodcasts = () => (\n    podcasts.map(({id, title_original}) => <li onClick={() => setSelectedPodcast(id)} key={id}>\n      {title_original}\n    </li>)\n  )\n\n  return (\n    <>\n      <h1>Search for a podcast</h1>\n      <form>\n        <input\n          type='text'\n          placeholder='Search for a podcast'\n          value={searchTerm}\n          onChange={e => setSearchTerm(e.target.value)}\n        />\n        <button onClick={getPodcasts}>Search</button>\n      </form>\n      <ul>\n        {renderPodcasts()}\n      </ul>\n    </>\n  )\n}\n\nexport default Search;\n","import React, { useEffect, useState } from 'react';\n\nconst listenNotesApiUrl = 'https://listen-api.listennotes.com/api/v2';\n\nconst Podcast = ({ id }) => {\n  const [podcastDetails, setPodcastDetails] = useState({});\n  const [audio, setAudio] = useState();\n\n  useEffect(async () => {\n    const options = {\n      headers: {\n        'X-ListenAPI-Key': process.env.REACT_APP_LISTEN_NOTES_API_KEY,\n      }\n    };\n\n    const result = await fetch(`${listenNotesApiUrl}/podcasts/${id}`, options);\n    const parsed = await result.json();\n\n    setPodcastDetails(parsed);\n  }, [id]);\n\n  const renderEpisodeList = () => (\n    podcastDetails.episodes.map(({ audio, id, title }) => (\n      <li key={id} onClick={() => setAudio(audio)}>{title}</li>\n    ))\n  )\n\n\n  return (\n    podcastDetails.episodes ?\n      <>\n        <ul>\n          {renderEpisodeList()}\n        </ul>\n        { audio &&\n          <audio\n            controls\n            src={audio}>\n              Your browser does not support the\n              <code>audio</code> element.\n          </audio>\n        }\n      </>\n    :\n      <>\n        The podcast list is loading\n      </>\n  )\n}\n\nexport default Podcast;\n","import React, {useState} from 'react';\n\nimport Search from './screens/search';\nimport Podcast from './screens/podcast';\n\nconst App = () => {\n  const [selectedPodcast, setSelectedPodcast] = useState();\n  return (\n    selectedPodcast\n      ? <Podcast id={selectedPodcast} />\n      : <Search setSelectedPodcast={setSelectedPodcast} />\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}